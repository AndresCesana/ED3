/************************
* $Id$		dac_sinewave_test.c				2010-06-04
* @file		dac_sinewave_test.c
* @brief	This example describes how to use DAC to generate a sine wave
* 			using DMA to transfer data
* @version	2.0
* @date		04. June. 2010
* @author	NXP MCU SW Application Team
*
* Copyright(C) 2010, NXP Semiconductor
* All rights reserved.
*
*************************
* Software that is described herein is for illustrative purposes only
* which provides customers with programming information regarding the
* products. This software is supplied "AS IS" without any warranties.
* NXP Semiconductors assumes no responsibility or liability for the
* use of the software, conveys no license or title under any patent,
* copyright, or mask work right to the product. NXP Semiconductors
* reserves the right to make changes in the software without
* notification. NXP Semiconductors also make no representation or
* warranty that such application will be suitable for the specified
* use without further testing or modification.
************************/
#include "lpc17xx_dac.h"
#include "lpc17xx_pinsel.h"
#include "lpc17xx_gpdma.h"
#include "lpc17xx.h"
#include "lpc17xx_pinsel.h"
#include "lpc17xx_dac.h"
#include "lpc17xx_adc.h"
#include "lpc17xx_timer.h"
#include "lpc17xx_exti.h"
#include "math.h"
#include "lpc17xx_clkpwr.h"
#include "lpc17xx_gpdma.h"
#include "lpc17xx_gpio.h"
#include "lpc17xx_uart.h"
/* Example group ----------------------------------------------------------- */
/** @defgroup DAC_SineWave	SineWave
 * @ingroup DAC_Examples
 * @{
 */

/********* PRIVATE MACROS **********/
/** DMA size of transfer */
#define DMA_SIZE		60
#define NUM_SINE_SAMPLE	60
#define SINE_FREQ_IN_HZ	60
#define PCLK_DAC_IN_MHZ	25 //CCLK divided by 4

uint16_t adc_value = 0;
uint8_t encenderMotor = 0;
/********* PRIVATE VARIABLES **********/
GPDMA_Channel_CFG_Type GPDMACfg;

//-------------------------MAIN FUNCTION------------------------------/
void Configurar_Pines(void){

	//ADC P0.23 FUNCION 1
	PINSEL_CFG_Type pinsel_cfg;
	pinsel_cfg.Pinnum = 23;
	pinsel_cfg.Portnum = 0;
	pinsel_cfg.Funcnum = 1;
	pinsel_cfg.OpenDrain = 0;
	pinsel_cfg.Pinmode = 0;
	PINSEL_ConfigPin(&pinsel_cfg);

	// Pin 0 puerto 0 P0.0
	PINSEL_CFG_Type pinselCfg;
	pinselCfg.Portnum = 0;
	pinselCfg.Pinnum = 0;
	pinselCfg.Funcnum = 0;
	pinselCfg.Pinmode = PINSEL_PINMODE_NORMAL;
	PINSEL_ConfigPin(&pinselCfg);
	GPIO_SetDir(0, (1<<0), 1);

	pinsel_cfg.Pinnum = 10;
	pinsel_cfg.Portnum = 2;
	pinsel_cfg.Funcnum = 1;
	pinsel_cfg.OpenDrain = 0;
	pinsel_cfg.Pinmode = PINSEL_PINMODE_PULLUP;
	PINSEL_ConfigPin(&pinsel_cfg);
}
void UARTconfig(void){
    //Configuracion del puerto TXD0 Y RXD0
    	PINSEL_CFG_Type pinselCfg;
        //TXD0
	        pinselCfg.Portnum = 0;
	        pinselCfg.Pinnum = 2;
	        pinselCfg.Funcnum = 1;
	        pinselCfg.Pinmode = 2;
            GPIO_SetDir(0, (1<<2), 1);//OUTPUT  - TXD0
	PINSEL_ConfigPin(&pinselCfg);
        //RXD0
            pinselCfg.Portnum = 0;
	        pinselCfg.Pinnum = 3;
	        pinselCfg.Funcnum = 1;
	        pinselCfg.Pinmode = 2;
            GPIO_SetDir(0, (1<<3), 0);
	PINSEL_ConfigPin(&pinselCfg);//INPUT  - RXD0
	//Configuro UART
	UART_CFG_Type UART;
        UART.Baud_rate = 9600;
        UART.Parity = UART_PARITY_NONE;
        UART.Databits = UART_DATABIT_8;
        UART.Stopbits = UART_STOPBIT_1;
	UART_Init(LPC_UART0,&UART);
	UART_ConfigStructInit(&UART);
	//Habilito interrupción
	UART_IntConfig(LPC_UART0,UART_INTCFG_RLS,ENABLE);
	NVIC_EnableIRQ(UART0_IRQn);



}
void ConfigEINT(void){  //EXTERNAL 3 NIVEL BAJO

	EXTI_InitTypeDef exti_cfg;

	exti_cfg.EXTI_Line     = EXTI_EINT0;
	exti_cfg.EXTI_Mode     = EXTI_MODE_EDGE_SENSITIVE;
	exti_cfg.EXTI_polarity = EXTI_POLARITY_LOW_ACTIVE_OR_FALLING_EDGE;

	EXTI_Config(&exti_cfg);
	NVIC_EnableIRQ(EINT0_IRQn);
}
void EINT0_IRQHandler(void){
	if(encenderMotor == 0){
		encenderMotor = 1;
	}else{
		encenderMotor = 0;
	}
	EXTI_ClearEXTIFlag(EXTI_EINT0); //LIMPIO BANDERA
}

void Configuracion_timer1(uint8_t dutyCycle){
	//Configuracion del Timer
	TIM_TIMERCFG_Type timer_cfg;
	timer_cfg.PrescaleOption = TIM_PRESCALE_USVAL; // Para valores de microsegundo
	timer_cfg.PrescaleValue = 10; // Va a contar 0.001 segundo
	TIM_Init(LPC_TIM1, TIM_TIMER_MODE , &timer_cfg);

	//Configuracion de la interrupcion del timer por match 0
	TIM_MATCHCFG_Type match_cfg0 ,match_cfg1 ;
	match_cfg0.MatchChannel = 0;
	match_cfg0.IntOnMatch = ENABLE;
	match_cfg0.StopOnMatch = DISABLE;
	match_cfg0.MatchValue = 100;// Va a contar 0.1 segundos
	match_cfg0.ExtMatchOutputType = TIM_EXTMATCH_NOTHING;
	match_cfg0.ResetOnMatch = ENABLE;
	TIM_ConfigMatch(LPC_TIM1, &match_cfg0);
	//Configuracion de la interrupcion del timer por match 1
	match_cfg1.MatchChannel = 1;
	match_cfg1.IntOnMatch = ENABLE;
	match_cfg1.StopOnMatch = DISABLE;
	match_cfg1.MatchValue = dutyCycle;// Va a contar de 0 a 0.1 segundos segun el vlaor del dutyCycle
	match_cfg1.ExtMatchOutputType = TIM_EXTMATCH_NOTHING;
	match_cfg1.ResetOnMatch = DISABLE;
	TIM_ConfigMatch(LPC_TIM1, &match_cfg1);
	// Inicio el timer
	TIM_Cmd(LPC_TIM1, ENABLE);
	// Habilito la interrupcion del timer
	NVIC_EnableIRQ(TIMER1_IRQn);
	// Elijo el timer que quiero usar
	CLKPWR_SetPCLKDiv (CLKPWR_PCLKSEL_TIMER1, CLKPWR_PCLKSEL_CCLK_DIV_1); // Selecciono como fuente el clock sin divisiones
}
void TIMER1_IRQHandler(void){
	if(TIM_GetIntStatus(LPC_TIM1, TIM_MR0_INT)){
		GPIO_SetValue(0, (1<<0));//Primer match pone la salida en 1
		TIM_ClearIntPending(LPC_TIM1, TIM_MR0_INT);
	}else{
		GPIO_ClearValue(0, (1<<0));//Segundo match pone la señal a 0 luego de un % del dutyCycle
		TIM_ClearIntPending(LPC_TIM1, TIM_MR1_INT);
	}
}

void Configtimer3(){

	TIM_TIMERCFG_Type timer_cfg;
	timer_cfg.PrescaleOption = TIM_PRESCALE_TICKVAL; // Para valores de tick
	timer_cfg.PrescaleValue = 1; // tquiero = tiempoclck*(ps+1) 4.10^-3
	TIM_Init(LPC_TIM3, TIM_TIMER_MODE , &timer_cfg);
	TIM_MATCHCFG_Type match_cfg;
	match_cfg.MatchChannel = 3;
	match_cfg.IntOnMatch = ENABLE;
	match_cfg.StopOnMatch = DISABLE;
	match_cfg.MatchValue = 30000000;// tinterr = tquiero* (Mv+1)
	match_cfg.ExtMatchOutputType = TIM_EXTMATCH_NOTHING;
	match_cfg.ResetOnMatch = ENABLE;
	TIM_ConfigMatch(LPC_TIM3, &match_cfg);
	TIM_Cmd(LPC_TIM3, ENABLE);
	NVIC_EnableIRQ(TIMER3_IRQn);
	CLKPWR_SetPCLKDiv (CLKPWR_PCLKSEL_TIMER3, CLKPWR_PCLKSEL_CCLK_DIV_1); // Selecciono como fuente el clock sin divisiones
}

void ConfigADC(void){ // 200Khz, MODO BURST CANAL 0 INTERRUPCION HABILITADA
	ADC_Init(LPC_ADC, 200000);
	ADC_IntConfig(LPC_ADC,ADC_ADINTEN0,DISABLE);
	ADC_ChannelCmd(LPC_ADC,0,ENABLE);
	//ADC_BurstCmd(LPC_ADC,DISABLE);
}

void TIMER3_IRQHandler(void){
    TIM_ClearIntPending(LPC_TIM3, TIM_MR3_INT);


    if(adc_value>1000){
    	GPDMA_ChannelCmd(0, ENABLE);
        uint32_t aux = (PCLK_DAC_IN_MHZ*1000000)/((100+900*(adc_value-1000)/3095)*NUM_SINE_SAMPLE);
        DAC_SetDMATimeOut(LPC_DAC,aux);
        if(encenderMotor == 0){
        	Configuracion_timer1(100*(adc_value-1000)/3095);
		}else{
			Configuracion_timer1(50);
		}

    }else{
    	GPDMA_ChannelCmd(0, DISABLE);
    	if(encenderMotor == 0){
    		Configuracion_timer1(0);
    	}else{
    		Configuracion_timer1(50);
    	}
    }
    }
int ConfigDMA(void)
{
	PINSEL_CFG_Type PinCfg;
	DAC_CONVERTER_CFG_Type DAC_ConverterConfigStruct;
	GPDMA_LLI_Type DMA_LLI_Struct;
	uint32_t tmp;
	uint32_t i;
	uint32_t sin_0_to_90_16_samples[16]={\
			0,1045,2079,3090,4067,\
			5000,5877,6691,7431,8090,\
			8660,9135,9510,9781,9945,10000\
	};
	uint32_t dac_sine_lut[NUM_SINE_SAMPLE];
	/*
	 * Init DAC pin connect
	 * AOUT on P0.26
	 */
	PinCfg.Funcnum = 2;
	PinCfg.OpenDrain = 0;
	PinCfg.Pinmode = 0;
	PinCfg.Pinnum = 26;
	PinCfg.Portnum = 0;
	PINSEL_ConfigPin(&PinCfg);

	//Prepare DAC sine look up table
	for(i=0;i<NUM_SINE_SAMPLE;i++)
	{
		if(i<=15)
		{
			dac_sine_lut[i] = 512 + 512*sin_0_to_90_16_samples[i]/10000;
			if(i==15) dac_sine_lut[i]= 1023;
		}
		else if(i<=30)
		{
			dac_sine_lut[i] = 512 + 512*sin_0_to_90_16_samples[30-i]/10000;
		}
		else if(i<=45)
		{
			dac_sine_lut[i] = 512 - 512*sin_0_to_90_16_samples[i-30]/10000;
		}
		else
		{
			dac_sine_lut[i] = 512 - 512*sin_0_to_90_16_samples[60-i]/10000;
		}
		dac_sine_lut[i] = (dac_sine_lut[i]<<6);
	}
	//Prepare DMA link list item structure
	DMA_LLI_Struct.SrcAddr= (uint32_t)dac_sine_lut;
	DMA_LLI_Struct.DstAddr= (uint32_t)&(LPC_DAC->DACR);
	DMA_LLI_Struct.NextLLI= (uint32_t)&DMA_LLI_Struct;
	DMA_LLI_Struct.Control= DMA_SIZE
							| (2<<18) //source width 32 bit
							| (2<<21) //dest. width 32 bit
							| (1<<26) //source increment
							;

	/* GPDMA block section -------------------------------------------- */
	/* Initialize GPDMA controller */
	GPDMA_Init();

	// Setup GPDMA channel --------------------------------
	// channel 0
	GPDMACfg.ChannelNum = 0;
	// Source memory
	GPDMACfg.SrcMemAddr = (uint32_t)(dac_sine_lut);
	// Destination memory - unused
	GPDMACfg.DstMemAddr = 0;
	// Transfer size
	GPDMACfg.TransferSize = DMA_SIZE;
	// Transfer width - unused
	GPDMACfg.TransferWidth = 0;
	// Transfer type
	GPDMACfg.TransferType = GPDMA_TRANSFERTYPE_M2P;
	// Source connection - unused
	GPDMACfg.SrcConn = 0;
	// Destination connection
	GPDMACfg.DstConn = GPDMA_CONN_DAC;
	// Linker List Item - unused
	GPDMACfg.DMALLI = (uint32_t)&DMA_LLI_Struct;
	// Setup channel with given parameter
	GPDMA_Setup(&GPDMACfg);

	//Configuracion del DAC
		DAC_ConverterConfigStruct.CNT_ENA =SET;
		DAC_ConverterConfigStruct.DMA_ENA = SET;
		DAC_Init(LPC_DAC);
		/* set time out for DAC*/
		tmp = (PCLK_DAC_IN_MHZ*1000000)/(SINE_FREQ_IN_HZ*NUM_SINE_SAMPLE);
		DAC_SetDMATimeOut(LPC_DAC,tmp);
		DAC_ConfigDAConverterControl(LPC_DAC, &DAC_ConverterConfigStruct);

	// Enable GPDMA channel 0
	GPDMA_ChannelCmd(0, ENABLE);
	//Este es mi nuevo main para pulling
	while(1){
			 // Start conversion
			 ADC_StartCmd(LPC_ADC,ADC_START_NOW);
			 //Wait conversion complete
			 while (!(ADC_ChannelGetStatus(LPC_ADC,0,ADC_DATA_DONE)));
			 adc_value = ADC_ChannelGetData(LPC_ADC,0);
			    }
	return 1;
}

int main(void){
	Configurar_Pines();
	Configtimer3();
	ConfigADC();
	Configuracion_timer1(50);
	ConfigEINT();
	return ConfigDMA();
}
void UART0_IRQHandler(void){
    //Devuelvo el mismo valor que leo
	char c;
	c = UART_ReceiveByte((LPC_UART_TypeDef *)LPC_UART0);
	UART_SendByte((LPC_UART_TypeDef *)LPC_UART0, (uint8_t) c);
	return;
}

#ifdef  DEBUG
/***************************
* @brief		Reports the name of the source file and the source line number
* 				where the CHECK_PARAM error has occurred.
* @param[in]	file Pointer to the source file name
* @param[in]    line assert_param error line source number
* @return		None
***************************/
void check_failed(uint8_t *file, uint32_t line)
{
	/* User can add his own implementation to report the file name and line number,
	 ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */

	/* Infinite loop */
	while(1);
}
#endif
/*
 * @}
 */
