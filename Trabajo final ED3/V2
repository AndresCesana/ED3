#include "lpc17xx_dac.h"
#include "lpc17xx_pinsel.h"
#include "lpc17xx_gpdma.h"
#include "lpc17xx.h"
#include "lpc17xx_pinsel.h"
#include "lpc17xx_dac.h"
#include "lpc17xx_adc.h"
#include "lpc17xx_timer.h"
#include "lpc17xx_i2c.h"
#include "math.h"
#include "lpc17xx_clkpwr.h"
#include "lpc17xx_gpdma.h"
#include "lpc17xx_gpio.h"

#define DMA_SIZE		60
#define NUM_SINE_SAMPLE	60
uint8_t SINE_FREQ_IN_HZ	= 60;
#define PCLK_DAC_IN_MHZ	100 //CCLK divided by 4
uint32_t dac_sine_lut[NUM_SINE_SAMPLE];
void ConfigPuerto(void){
	PINSEL_CFG_Type pinsel_cfg;
	//DAC P 0.26 F2
	pinsel_cfg. Funcnum = 2;
	pinsel_cfg. Portnum = 0;
	pinsel_cfg. Pinnum = 26;
	pinsel_cfg.OpenDrain = 0;
	pinsel_cfg.Pinmode = 0;
	PINSEL_ConfigPin(&pinsel_cfg);
	PINSEL_CFG_Type pinselCfg;
	pinselCfg.Portnum = 0;
	pinselCfg.Pinnum = 22;
	pinselCfg.Funcnum = 0;
	pinselCfg.Pinmode = PINSEL_PINMODE_NORMAL;

	PINSEL_ConfigPin(&pinselCfg);

	GPIO_SetDir(0, (1<<22), 1);
}
void Configtimer0(){
	TIM_TIMERCFG_Type timer_cfg;
	timer_cfg.PrescaleOption = TIM_PRESCALE_TICKVAL; // Para valores de tick
	timer_cfg.PrescaleValue = 1; // tquiero = tiempoclck*(ps+1) 4.10^-3
	TIM_Init(LPC_TIM0, TIM_TIMER_MODE , &timer_cfg);
	TIM_MATCHCFG_Type match_cfg;
	match_cfg.MatchChannel = 3;
	match_cfg.IntOnMatch = ENABLE;
	match_cfg.StopOnMatch = DISABLE;
	match_cfg.MatchValue = 30000000;// tinterr = tquiero* (Mv+1)
	match_cfg.ExtMatchOutputType = TIM_EXTMATCH_NOTHING;
	match_cfg.ResetOnMatch = ENABLE;
	TIM_ConfigMatch(LPC_TIM0, &match_cfg);
	TIM_Cmd(LPC_TIM0, ENABLE);
	NVIC_EnableIRQ(TIMER0_IRQn);
	CLKPWR_SetPCLKDiv (CLKPWR_PCLKSEL_TIMER0, CLKPWR_PCLKSEL_CCLK_DIV_1); // Selecciono como fuente el clock sin divisiones
}
void Config_adc() {
    // Configuración del pin P0.23 como entrada del ADC (AD0.0)
    PINSEL_CFG_Type pinsel_cfg;
    pinsel_cfg.Funcnum = 1;                        // Función 1: AD0.0
    pinsel_cfg.Portnum = 0;                        // Puerto 0
    pinsel_cfg.Pinnum = 23;
    pinsel_cfg.OpenDrain = 0;
    pinsel_cfg.Pinmode = 0;
    PINSEL_ConfigPin(&pinsel_cfg);                 // Aplicar configuración de PIN

    // Inicialización del ADC
    ADC_ChannelCmd(LPC_ADC, 0, ENABLE);            // Habilita el canal AD0.0
    ADC_IntConfig(LPC_ADC, ADC_ADINTEN0, ENABLE);  // Habilita la interrupción para el canal AD0.0
    ADC_BurstCmd(LPC_ADC, DISABLE);                // Desactiva el modo de conversión en ráfaga (se usará conversión manual)
    ADC_StartCmd(LPC_ADC, ADC_START_ON_MAT03);
    // Habilitación de la interrupción del ADC
    NVIC_EnableIRQ(ADC_IRQn);                      // Activa la interrupción del ADC
}
void Config_DAC(void){
	GPDMA_Channel_CFG_Type GPDMACfg;
	PINSEL_CFG_Type PinCfg;
	DAC_CONVERTER_CFG_Type DAC_ConverterConfigStruct;
	GPDMA_LLI_Type DMA_LLI_Struct;
	PinCfg.Funcnum = 2;
	PinCfg.OpenDrain = 0;
	PinCfg.Pinmode = 0;
	PinCfg.Pinnum = 26;
	PinCfg.Portnum = 0;
	PINSEL_ConfigPin(&PinCfg);


	//Prepare DMA link list item structure
	DMA_LLI_Struct.SrcAddr= (uint32_t)dac_sine_lut;
	DMA_LLI_Struct.DstAddr= (uint32_t)&(LPC_DAC->DACR);
	DMA_LLI_Struct.NextLLI= (uint32_t)&DMA_LLI_Struct;
	DMA_LLI_Struct.Control= DMA_SIZE
							| (2<<18) //source width 32 bit
							| (2<<21) //dest. width 32 bit
							| (1<<26) //source increment
							;

	/* GPDMA block section -------------------------------------------- */
	/* Initialize GPDMA controller */
	GPDMA_Init();
	// Setup GPDMA channel --------------------------------
	// channel 0
	GPDMACfg.ChannelNum = 0;
	// Source memory
	GPDMACfg.SrcMemAddr = (uint32_t)(dac_sine_lut);
	// Destination memory - unused
	GPDMACfg.DstMemAddr = 0;
	// Transfer size
	GPDMACfg.TransferSize = DMA_SIZE;
	// Transfer width - unused
	GPDMACfg.TransferWidth = 0;
	// Transfer type
	GPDMACfg.TransferType = GPDMA_TRANSFERTYPE_M2P;
	// Source connection - unused
	GPDMACfg.SrcConn = 0;
	// Destination connection
	GPDMACfg.DstConn = GPDMA_CONN_DAC;
	// Linker List Item - unused
	GPDMACfg.DMALLI = (uint32_t)&DMA_LLI_Struct;
	// Setup channel with given parameter
	GPDMA_Setup(&GPDMACfg);
	uint32_t tmp;
	DAC_ConverterConfigStruct.CNT_ENA =SET;
	DAC_ConverterConfigStruct.DMA_ENA = SET;
	DAC_Init(LPC_DAC);
	/* set time out for DAC*/
	tmp = (PCLK_DAC_IN_MHZ*1000000)/(SINE_FREQ_IN_HZ*NUM_SINE_SAMPLE);
	DAC_SetDMATimeOut(LPC_DAC,tmp);
	DAC_ConfigDAConverterControl(LPC_DAC, &DAC_ConverterConfigStruct);

	// Enable GPDMA channel 0
	GPDMA_ChannelCmd(0, ENABLE);
}

int main(void)
{
	uint32_t tmp;
	uint32_t i;
	uint32_t sin_0_to_90_16_samples[16]={\
			0,1045,2079,3090,4067,\
			5000,5877,6691,7431,8090,\
			8660,9135,9510,9781,9945,10000\
	};

	//Prepare DAC sine look up table
		for(i=0;i<NUM_SINE_SAMPLE;i++)
		{
			if(i<=15)
			{
				dac_sine_lut[i] = 512 + 512*sin_0_to_90_16_samples[i]/10000;
				if(i==15) dac_sine_lut[i]= 1023;
			}
			else if(i<=30)
			{
				dac_sine_lut[i] = 512 + 512*sin_0_to_90_16_samples[30-i]/10000;
			}
			else if(i<=45)
			{
				dac_sine_lut[i] = 512 - 512*sin_0_to_90_16_samples[i-30]/10000;
			}
			else
			{
				dac_sine_lut[i] = 512 - 512*sin_0_to_90_16_samples[60-i]/10000;
			}
			dac_sine_lut[i] = (dac_sine_lut[i]<<6);
		}
	Configtimer0();
	Config_DAC();
	ConfigPuerto();
	Config_adc();
    while(1){

    }
    return 0;
}
void TIMER0_IRQHandler(void){
	(GPIO_ReadValue(0)& (1<<22)) ? GPIO_ClearValue(0, (1<<22)) : GPIO_SetValue(0, (1<<22));
	TIM_ClearIntPending(LPC_TIM0, TIM_MR3_INT);
	Config_DAC();
	}
void ADC_IRQHandler() {
	uint16_t adc_value;
    // Lee el valor convertido del canal 0 (AD0.0)
    adc_value = ADC_ChannelGetData(LPC_ADC, 0);
    SINE_FREQ_IN_HZ	= 60+120*adc_value/4097;
    // sigue mostrar la temperatura
}
