#include "lpc17xx.h"
#include "lpc17xx_pinsel.h"
#include "lpc17xx_dac.h"
#include "lpc17xx_adc.h"
#include "lpc17xx_timer.h"
#include "lpc17xx_exti.h"
#include "math.h"
#include "lpc17xx_clkpwr.h"
#include "lpc17xx_gpio.h"
#include "lpc17xx_gpdma.h"


// Definici√≥n de tabla senoidal de 16 puntos, centrada en 512 para ajustarse a la salida del DAC
uint8_t  DACStatus = 0;
uint16_t Valores[10] = {};
uint32_t promedio =0;
#define DMA_SIZE		60
#define NUM_SINE_SAMPLE	60
#define PCLK_DAC_IN_MHZ	100

uint32_t SINE_FREQ_IN_HZ = 60;
uint32_t dac_sine_lut[NUM_SINE_SAMPLE];
uint32_t adc_value = 0;
uint32_t VALPromedio(void);
void ConfigPuerto(void);
void ConfigADC(void);
void ConfigTimer1(void);
void ConfigEINT(void);




void ConfigPuerto(void){

	//ADC P0.23 FUNCION 1
	PINSEL_CFG_Type pinsel_cfg;

	pinsel_cfg.Pinnum = 23;
	pinsel_cfg.Portnum = 0;
	pinsel_cfg.Funcnum = 1;
	pinsel_cfg.OpenDrain = 0;
	pinsel_cfg.Pinmode = 0;

	PINSEL_ConfigPin(&pinsel_cfg);
	PINSEL_CFG_Type pinselCfg;
	pinselCfg.Portnum = 0;
	pinselCfg.Pinnum = 0;
	pinselCfg.Funcnum = 0;
	pinselCfg.Pinmode = PINSEL_PINMODE_NORMAL;
	PINSEL_ConfigPin(&pinselCfg);
	GPIO_SetDir(0, (1<<0), 1);

}

void ConfigADC(void){ // 200Khz, MODO BURST CANAL 0 INTERRUPCION HABILITADA

	ADC_Init(LPC_ADC, 200000);

	ADC_ChannelCmd(LPC_ADC,0,ENABLE);

	ADC_IntConfig(LPC_ADC,ADC_ADINTEN0,ENABLE);
	ADC_BurstCmd(LPC_ADC,ENABLE);
	//NVIC_EnableIRQ(ADC_IRQn);
	//NVIC_SetPriority(ADC_IRQn,10);

}
void Genera_onda_seno(void){
	uint32_t i;
	uint32_t sin_0_to_90_16_samples[16]={0,1045,2079,3090,4067,5000,5877,6691,7431,8090,8660,9135,9510,9781,9945,10000};

			for(i=0;i<NUM_SINE_SAMPLE;i++){
			if(i<=15){
				dac_sine_lut[i] = 512 + 512*sin_0_to_90_16_samples[i]/10000;
				if(i==15) dac_sine_lut[i]= 1023;
			}else if(i<=30){
				dac_sine_lut[i] = 512 + 512*sin_0_to_90_16_samples[30-i]/10000;
			}else if(i<=45){
				dac_sine_lut[i] = 512 - 512*sin_0_to_90_16_samples[i-30]/10000;
			}else{
				dac_sine_lut[i] = 512 - 512*sin_0_to_90_16_samples[60-i]/10000;
			}
		dac_sine_lut[i] = (dac_sine_lut[i]<<6);
		}
	}
void Configuracion_dac(void){
	//Configuracion del pin para el DAC
	PINSEL_CFG_Type PinCfg;
	PinCfg.Funcnum = 2;
	PinCfg.OpenDrain = 0;
	PinCfg.Pinmode = 0;
	PinCfg.Pinnum = 26;
	PinCfg.Portnum = 0;
	PINSEL_ConfigPin(&PinCfg);

	//Uso de lista linkeada
	GPDMA_LLI_Type DMA_LLI_Struct;
	DMA_LLI_Struct.SrcAddr= (uint32_t)dac_sine_lut;
	DMA_LLI_Struct.DstAddr= (uint32_t)&(LPC_DAC->DACR);
	DMA_LLI_Struct.NextLLI= (uint32_t)&DMA_LLI_Struct;
	DMA_LLI_Struct.Control= DMA_SIZE
							| (2<<18) //source width 32 bit
							| (2<<21) //dest. width 32 bit
							| (1<<26) //source increment
							;
	// Inicializo el GPDMA
	GPDMA_Init();
	GPDMA_Channel_CFG_Type GPDMACfg;
	GPDMACfg.ChannelNum = 0;
	GPDMACfg.SrcMemAddr = (uint32_t)(dac_sine_lut);
	GPDMACfg.DstMemAddr = 0;
	GPDMACfg.TransferSize = DMA_SIZE;
	GPDMACfg.TransferWidth = 0;
	GPDMACfg.TransferType = GPDMA_TRANSFERTYPE_M2P;
	GPDMACfg.SrcConn = 0;
	GPDMACfg.DstConn = GPDMA_CONN_DAC;
	GPDMACfg.DMALLI = (uint32_t)&DMA_LLI_Struct;
	GPDMA_Setup(&GPDMACfg);

	// Configuro el DAC
	DAC_CONVERTER_CFG_Type DAC_ConverterConfigStruct;
	DAC_ConverterConfigStruct.CNT_ENA = ENABLE;
	DAC_ConverterConfigStruct.DMA_ENA = ENABLE;
	DAC_Init(LPC_DAC);
	/* set time out for DAC*/
	DAC_SetDMATimeOut(LPC_DAC,(PCLK_DAC_IN_MHZ*1000000)/(SINE_FREQ_IN_HZ*NUM_SINE_SAMPLE));
	DAC_ConfigDAConverterControl(LPC_DAC, &DAC_ConverterConfigStruct);
	CLKPWR_SetPCLKDiv(CLKPWR_PCLKSEL_DAC, CLKPWR_PCLKSEL_CCLK_DIV_1);

	// Enable GPDMA canal 0
	GPDMA_ChannelCmd(0, ENABLE);
	//NVIC_EnableIRQ(DMA_IRQn);
}

void ConfigTimer0(void){ // TIMER QUE ACTUALIZA EL VALOR DE LAS SALIDAS CADA 20 uS PARA LAS PWM

	TIM_TIMERCFG_Type timer_cfg;

	timer_cfg.PrescaleOption = TIM_PRESCALE_USVAL;
	timer_cfg.PrescaleValue  = 1000;

	TIM_Init(LPC_TIM0, TIM_TIMER_MODE , &timer_cfg);

	TIM_MATCHCFG_Type match_cfg;

	match_cfg.MatchChannel = 0;
	match_cfg.IntOnMatch = ENABLE;
	match_cfg.ResetOnMatch = ENABLE;
	match_cfg.StopOnMatch = DISABLE;
	match_cfg.MatchValue = 3000;
	match_cfg.ExtMatchOutputType = TIM_EXTMATCH_NOTHING;

	TIM_ConfigMatch(LPC_TIM0, &match_cfg);
	TIM_Cmd(LPC_TIM0, ENABLE);
	CLKPWR_SetPCLKDiv (CLKPWR_PCLKSEL_TIMER0,CLKPWR_PCLKSEL_CCLK_DIV_1);
	NVIC_EnableIRQ(TIMER0_IRQn);
	NVIC_SetPriority(TIMER0_IRQn,1);
}
void Configuracion_timer1(void){
	//Configuracion del Timer
	TIM_TIMERCFG_Type timer_cfg;
	timer_cfg.PrescaleOption = TIM_PRESCALE_USVAL; // Para valores de microsegundo
	timer_cfg.PrescaleValue = 10; // Va a contar 0.001 segundo
	TIM_Init(LPC_TIM1, TIM_TIMER_MODE , &timer_cfg);

	//Configuracion de la interrupcion del timer por match 0
	TIM_MATCHCFG_Type match_cfg0 ,match_cfg1 ;
	match_cfg0.MatchChannel = 0;
	match_cfg0.IntOnMatch = ENABLE;
	match_cfg0.StopOnMatch = DISABLE;
	match_cfg0.MatchValue = 100;// Va a contar 30 segundos
	match_cfg0.ExtMatchOutputType = TIM_EXTMATCH_NOTHING;
	match_cfg0.ResetOnMatch = ENABLE;
	TIM_ConfigMatch(LPC_TIM1, &match_cfg0);
	//Configuracion de la interrupcion del timer por match 1
	match_cfg1.MatchChannel = 1;
	match_cfg1.IntOnMatch = ENABLE;
	match_cfg1.StopOnMatch = DISABLE;
	match_cfg1.MatchValue = 50;// Va a contar 30 segundos
	match_cfg1.ExtMatchOutputType = TIM_EXTMATCH_NOTHING;
	match_cfg1.ResetOnMatch = DISABLE;
	TIM_ConfigMatch(LPC_TIM1, &match_cfg1);
	// Inicio el timer
	TIM_Cmd(LPC_TIM1, ENABLE);
	// Habilito la interrupcion del timer
	NVIC_EnableIRQ(TIMER1_IRQn);
	// Elijo el timer que quiero usar
	CLKPWR_SetPCLKDiv (CLKPWR_PCLKSEL_TIMER1, CLKPWR_PCLKSEL_CCLK_DIV_1); // Selecciono como fuente el clock sin divisiones
}
int main(void){
	ConfigPuerto();
	ConfigADC();
	ConfigTimer0();
	Genera_onda_seno();
	Configuracion_dac();
	Configuracion_timer1();
	while(1){}

	return 0;
}

void TIMER0_IRQHandler(void){ //MR0 DE 20ns
	(GPIO_ReadValue(0)& (1<<22)) ? GPIO_ClearValue(0, (1<<22)) : GPIO_SetValue(0, (1<<22));

	adc_value = (ADC_ChannelGetData(LPC_ADC,0));
	SINE_FREQ_IN_HZ = 60+1200*adc_value/4095;
	Configuracion_dac();
	TIM_TIMERCFG_Type timer_cfg;
		timer_cfg.PrescaleOption = TIM_PRESCALE_USVAL; // Para valores de microsegundo
		timer_cfg.PrescaleValue = 10; // Va a contar 0.001 segundo
		TIM_Init(LPC_TIM1, TIM_TIMER_MODE , &timer_cfg);

		//Configuracion de la interrupcion del timer por match 0
		TIM_MATCHCFG_Type match_cfg0 ,match_cfg1 ;
		match_cfg0.MatchChannel = 0;
		match_cfg0.IntOnMatch = ENABLE;
		match_cfg0.StopOnMatch = DISABLE;
		match_cfg0.MatchValue = 100;// Va a contar 30 segundos
		match_cfg0.ExtMatchOutputType = TIM_EXTMATCH_NOTHING;
		match_cfg0.ResetOnMatch = ENABLE;
		TIM_ConfigMatch(LPC_TIM1, &match_cfg0);
		//Configuracion de la interrupcion del timer por match 1
		match_cfg1.MatchChannel = 1;
		match_cfg1.IntOnMatch = ENABLE;
		match_cfg1.StopOnMatch = DISABLE;
		match_cfg1.MatchValue = (adc_value>>2)*100/4094;// Va a contar 30 segundos
		match_cfg1.ExtMatchOutputType = TIM_EXTMATCH_NOTHING;
		match_cfg1.ResetOnMatch = DISABLE;
		TIM_ConfigMatch(LPC_TIM1, &match_cfg1);
		// Inicio el timer
		TIM_Cmd(LPC_TIM1, ENABLE);
		// Habilito la interrupcion del timer
		NVIC_EnableIRQ(TIMER1_IRQn);
		// Elijo el timer que quiero usar
		CLKPWR_SetPCLKDiv (CLKPWR_PCLKSEL_TIMER1, CLKPWR_PCLKSEL_CCLK_DIV_1); // Selecciono como fuente el clock sin divisiones

}


void TIMER1_IRQHandler(void){
	if(TIM_GetIntStatus(LPC_TIM1, TIM_MR0_INT)){
		GPIO_SetValue(0, (1<<0));
		TIM_ClearIntPending(LPC_TIM1, TIM_MR0_INT);
	}else{
		GPIO_ClearValue(0, (1<<0));
		TIM_ClearIntPending(LPC_TIM1, TIM_MR1_INT);
	}
}
void DMA_IRQHandler(void){
	//Configuracion_dac();
	GPDMA_ClearIntPending (GPDMA_STATCLR_INTTC, 0);
}
